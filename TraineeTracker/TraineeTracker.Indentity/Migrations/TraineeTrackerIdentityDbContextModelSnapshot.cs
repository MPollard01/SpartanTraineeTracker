// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TraineeTracker.Indentity;

#nullable disable

namespace TraineeTracker.Indentity.Migrations
{
    [DbContext(typeof(TraineeTrackerIdentityDbContext))]
    partial class TraineeTrackerIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cac43a6e-f7bb-4448-baaf-1add431ccbbf",
                            ConcurrencyStamp = "58c9c4c6-eee2-4ee3-86eb-218a142d2608",
                            Name = "Trainee",
                            NormalizedName = "TRAINEE"
                        },
                        new
                        {
                            Id = "cac43a7e-f7bb-4446-baaf-1add431ddbbf",
                            ConcurrencyStamp = "0a73d3ca-2785-4614-bf84-09c1492b4ee8",
                            Name = "Trainer",
                            NormalizedName = "TRAINER"
                        },
                        new
                        {
                            Id = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf",
                            ConcurrencyStamp = "7174c072-53d7-4ca2-b2bf-ff2ea6d5843e",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf"
                        },
                        new
                        {
                            UserId = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            RoleId = "cac43a7e-f7bb-4446-baaf-1add431ddbbf"
                        },
                        new
                        {
                            UserId = "0c1518f6-e6bc-4568-b694-e50fb2a3eac1",
                            RoleId = "cac43a7e-f7bb-4446-baaf-1add431ddbbf"
                        },
                        new
                        {
                            UserId = "7e6adc8b-0a6e-4970-af0c-18f7fe18336d",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        },
                        new
                        {
                            UserId = "2cbdecbb-791e-45c0-93de-51abc9b71859",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TraineeTracker.Indentity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "caf0378c-3e06-4fe8-9cb6-bda8cd2ee11a",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOKlrqxTgvJc1+ovegyD+0FJCLpsP51/jeqQx4UcBTRxfJRyfdaKvxY7xh0CzXsZ6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e74435c9-6dfe-420c-a818-2ebdbc82b67b",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ec143e1-13f8-4a7a-a60b-e8fd126cea58",
                            Email = "johndoe@sparta.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@SPARTA.COM",
                            NormalizedUserName = "JOHNDOE@SPARTA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEl2rC7FRz3OH7F3kBTCaE9bT89ZJpgwA3Say4L0dSSvKrNm2zHrbCfdK0wyP10/QA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da8f8663-b5d9-4d85-abc8-55c840473476",
                            TwoFactorEnabled = false,
                            UserName = "johndoe@sparta.com"
                        },
                        new
                        {
                            Id = "0c1518f6-e6bc-4568-b694-e50fb2a3eac1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0afb70e4-b8be-443e-a976-90d5e9ce0cd5",
                            Email = "janedoe@sparta.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANEDOE@SPARTA.COM",
                            NormalizedUserName = "JANEDOE@SPARTA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMS/FuxZR8Hk1h/IR5d1t2iR7aLvQrgcKg8ZUDxF44yt3w8lsTOm7AaDY4KbGJUpBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1429985-40b2-4d62-a8ef-a58f52dd9a85",
                            TwoFactorEnabled = false,
                            UserName = "janedoe@sparta.com"
                        },
                        new
                        {
                            Id = "7e6adc8b-0a6e-4970-af0c-18f7fe18336d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b414cc72-34d7-4688-8dfa-2a4f2a7d96a9",
                            Email = "carlangle@sparta.com",
                            EmailConfirmed = true,
                            FirstName = "Carl",
                            LastName = "Angle",
                            LockoutEnabled = false,
                            NormalizedEmail = "CARLANGLE@SPARTA.COM",
                            NormalizedUserName = "CARLANGLE@SPARTA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED+oWZY36iKwAuLdY+0UHC/IjQAQG2wUlVf90JtsCuVrkY47UAX3PVMUH6qXsR0d0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "587bacac-9a62-46c5-94c8-c91c07579a00",
                            TwoFactorEnabled = false,
                            UserName = "carlangle@sparta.com"
                        },
                        new
                        {
                            Id = "2cbdecbb-791e-45c0-93de-51abc9b71859",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56fb0eab-1066-4bf1-8bd0-6d76fa3f89b3",
                            Email = "kimsale@sparta.com",
                            EmailConfirmed = true,
                            FirstName = "Kim",
                            LastName = "Sale",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIMSALE@SPARTA.COM",
                            NormalizedUserName = "KIMSALE@SPARTA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAMoWqQhX6Nu/tW2NVfT9dWGTCaO/W0tvEdqouxZMwhCspxa9JEl9Gzn/J/wnf/zrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e701d0a2-23b4-4465-b513-654a794b19fe",
                            TwoFactorEnabled = false,
                            UserName = "kimsale@sparta.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TraineeTracker.Indentity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TraineeTracker.Indentity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TraineeTracker.Indentity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TraineeTracker.Indentity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
