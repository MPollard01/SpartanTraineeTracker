// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TraineeTracker.Indentity;

#nullable disable

namespace TraineeTracker.Indentity.Migrations
{
    [DbContext(typeof(TraineeTrackerIdentityDbContext))]
    [Migration("20230106172013_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cac43a6e-f7bb-4448-baaf-1add431ccbbf",
                            ConcurrencyStamp = "b7dcfaa8-d0bd-4c39-b7da-a16799d47dca",
                            Name = "Trainee",
                            NormalizedName = "TRAINEE"
                        },
                        new
                        {
                            Id = "cac43a7e-f7bb-4446-baaf-1add431ddbbf",
                            ConcurrencyStamp = "fde8cd7e-6ecd-49ed-879c-b3e38d4e96e2",
                            Name = "Trainer",
                            NormalizedName = "TRAINER"
                        },
                        new
                        {
                            Id = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf",
                            ConcurrencyStamp = "d602edd3-5907-4b2c-9ce5-f6aff4d8d903",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf"
                        },
                        new
                        {
                            UserId = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            RoleId = "cac43a7e-f7bb-4446-baaf-1add431ddbbf"
                        },
                        new
                        {
                            UserId = "0c1518f6-e6bc-4568-b694-e50fb2a3eac1",
                            RoleId = "cac43a7e-f7bb-4446-baaf-1add431ddbbf"
                        },
                        new
                        {
                            UserId = "7e6adc8b-0a6e-4970-af0c-18f7fe18336d",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        },
                        new
                        {
                            UserId = "2cbdecbb-791e-45c0-93de-51abc9b71859",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TraineeTracker.Indentity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e9aec57-6169-49b8-ac8f-a13d7425eb15",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKkbCqwUb3mzHswN1WpTxC1TwSORDaRA3OziaD912RPs9pmgYjSk+HBGn3oNJ7cKEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8075e0c-a23f-4734-9bc8-2055adddd912",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "adb72ea3-b0dd-496e-a7dc-d66e1961c100",
                            Email = "johndoe@sparta.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@SPARTA.COM",
                            NormalizedUserName = "JOHNDOE@SPARTA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIapmSsrzVfUgDCy6SQi1WpcnPdEH9COQ/myw8UeoI2LgGuaelrBAl9XS7CpQrsZtg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aa153c26-65a2-4cb8-b39e-6b72f25a76f6",
                            TwoFactorEnabled = false,
                            UserName = "johndoe@sparta.com"
                        },
                        new
                        {
                            Id = "0c1518f6-e6bc-4568-b694-e50fb2a3eac1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83561ba6-560f-4348-8d71-5ab1b6fae86e",
                            Email = "janedoe@sparta.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANEDOE@SPARTA.COM",
                            NormalizedUserName = "JANEDOE@SPARTA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENWq7kj/DqiO4Yi6jsNY2fLicK9nnx1Ohxu6mTqG2x6eePbfpUfpCYswBX7S5S4FrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb6af015-894b-4b05-8e22-6f1dab4136ce",
                            TwoFactorEnabled = false,
                            UserName = "janedoe@sparta.com"
                        },
                        new
                        {
                            Id = "7e6adc8b-0a6e-4970-af0c-18f7fe18336d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b8d2f34-7d3a-4cde-911a-d33005f6e729",
                            Email = "carlangle@sparta.com",
                            EmailConfirmed = true,
                            FirstName = "Carl",
                            LastName = "Angle",
                            LockoutEnabled = false,
                            NormalizedEmail = "CARLANGLE@SPARTA.COM",
                            NormalizedUserName = "CARLANGLE@SPARTA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBhBPQUKFEBKLHfxa1tnU1QYc3As2Ntno+i45kZyZaDK6yAbbNh0wil41UA4zZsjjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "65c89c59-ca8a-4af9-88a8-99f54db157dd",
                            TwoFactorEnabled = false,
                            UserName = "carlangle@sparta.com"
                        },
                        new
                        {
                            Id = "2cbdecbb-791e-45c0-93de-51abc9b71859",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2650609-3c2e-404b-b4df-e4c7cd2ec348",
                            Email = "kimsale@sparta.com",
                            EmailConfirmed = true,
                            FirstName = "Kim",
                            LastName = "Sale",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIMSALE@SPARTA.COM",
                            NormalizedUserName = "KIMSALE@SPARTA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGBhwUHV8pbVXdxAN1+F9VPDPeBC0+1lFr/YWvSUNYxKVlxWK59Z+WmpVAXO20Kefg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d48c61b6-8879-4c7f-bef8-a058d34c7df4",
                            TwoFactorEnabled = false,
                            UserName = "kimsale@sparta.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TraineeTracker.Indentity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TraineeTracker.Indentity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TraineeTracker.Indentity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TraineeTracker.Indentity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
